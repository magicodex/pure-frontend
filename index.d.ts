/** Declaration file generated by dts-gen */

import { Model } from "ui-data";
import JQuery from 'jquery';

type mainFn = (scope: any, view: fn.View) => void;
type viewScopeCallbackFn = (scope: any) => void;

export const config: {
    singlePageBaseUrl: string;
    tabIndexAttributeName: string;
    uiNameAttributeName: string;
    viewIndexAttributeName: string;
    viewStatusAttributeName: string;
};

export const messages: {
    notFoundFullUrl: string;
    notFoundUrlPattern: string;
    notFoundviewName: string;
    unknownError: string;
};

export function app(): void;

export function utils(): void;

export namespace app {

    /**
     * @description 加载视图
     * @param {string} url URL字符串
     */
    function loadView(url: any): void;

    /**
     * @description 返回到之前的视图
     * @param {string} url URL字符串
     */
    function popView(url: any): void;

    /**
     * @description 加载视图并添加到堆栈顶部
     * @param {string} url URL字符串
     */
    function pushView(url: any): void;

    /**
     * @description 显示错误信息
     * @param {string} message 
     */
    function showError(message: any): void;

    /**
     * @description 显示信息
     * @param {string} message 
     */
    function showMessage(message: any): void;

    /**
     * @description 注册视图主函数
     * @param {string} viewName 
     * @param {function} mainFn 
     */
    function viewMain(viewName: any, mainFn: mainFn): void;

    /**
     * @description 初始视图作用域
     * @param {string} viewName 
     * @param {function} callbackFn 
     */
    function viewScope(viewName: any, callbackFn: viewScopeCallbackFn): void;

}

export namespace fn {
    class AjaxCallService {
        constructor(sourceElement: any);

        beforeSend(jqXHR: any, settings: any): void;

        callService(url: any, data: any, opts: any): AjaxResult;

    }

    class AjaxResult {
        constructor(deferred: any, sourceElement: any);

        doHandleResult(doneFn: any, failFn: any, showMask: any): any;

        thenResult(doneFn: any, failFn: any): any;

        waitResult(doneFn: any, failFn: any): any;

        static handleAjaxError(sourceElement: any, jqXHR: any, textStatus: any, errorThrown: any): void;

    }

    class SequenceGenerator {
        constructor(initValue: any, ...args: any[]);

        nextValue(): any;

    }

    class View {
        constructor(viewElement: any, viewInfo: any);

        $find(...args: any[]): JQuery;

        $ui(name: any): JQuery;

        callService(url: any, data: any, opts: any): AjaxResult;

        getDataModel(): Model;

        getUrlParam(name: any): any;

        getUrlParams(): any;

        getViewElement(): any;

        getViewInfo(): ViewInfo;

    }

    class ViewInfo {
        constructor();

        getFullUrl(): any;

        getUrlPattern(): any;

        getViewName(): any;

        setFullUrl(fullUrl: any): void;

        setUrlPattern(urlPattern: any): void;

        setViewName(viewName: any): void;

    }

    class ViewLoader {
        constructor(targetElement: any, callbackFn: any);

        initViewAfterRender(): void;

        loadView(url: any): void;

        preRenderView(url: any, data: any, textStatus: any, jqXHR: any): boolean;

        renderView(url: any, data: any, textStatus: any, jqXHR: any): void;

        static lastViewInfo: {
        };

    }

    class ViewMask {
        constructor(viewElement: any);

        hiddenMask(): void;

        showMask(): void;

    }

    class ViewResponse {
        constructor(url: any, jqXHR: any);

        getViewInfo(): ViewInfo;

        static fullUrlHeaderName: string;

        static urlPatternHeaderName: string;

        static viewNameHeaderName: string;

    }

    function Ajax(): void;

    function App(): void;

    function AppAlertMessages(): void;

    function BrowserUrl(): void;

    function Global(): void;

    function UrlParser(): void;

    function Utils(): void;

    function ViewManager(): void;

    namespace Ajax {
        function callService(url: any, data: any, opts: any): AjaxResult;

    }

    namespace App {
        function loadView(url: any): void;

        function popView(url: any): void;

        function pushView(url: any): void;

        function showError(message: any): void;

        function showMessage(message: any): void;

        function viewMain(viewName: any, mainFn: mainFn): void;

        function viewScope(viewName: any, callbackFn: viewScopeCallbackFn): void;

    }

    namespace AppAlertMessages {
        function showError(message: any): void;

        function showMessage(message: any): void;

    }

    namespace BrowserUrl {
        function getBrowserUrl(viewUrl: any): any;

        function getFullUrl(relativeUrl: any): any;

        function setBrowserUrl(viewUrl: any): void;

        function setLocationUrl(newUrl: any): void;

    }

    namespace Global {
        const config: {
            singlePageBaseUrl: string;
            tabIndexAttributeName: string;
            uiNameAttributeName: string;
            viewIndexAttributeName: string;
            viewStatusAttributeName: string;
        };

        const messages: {
            notFoundFullUrl: string;
            notFoundUrlPattern: string;
            notFoundviewName: string;
            unknownError: string;
        };

    }

    namespace UrlParser {
        function parseAllParams(fullUrl: any, urlPattern: any): any;

        function parsePathParams(fullUrl: any, urlPattern: any): any;

        function parseQueryParams(fullUrl: any): any;

    }

    namespace Utils {
        function concatObjects(objectArray: any, ...args: any[]): any;

        function convertToString(arg: any): any;

        function emptyArrayIfNullOrUndefined(arg: any): any;

        function emptyObjectIfNullOrUndefined(arg: any): any;

        function emptyStringIfNullOrUndefined(arg: any): any;

        function formatString(format: any, objectArray: any, ...args: any[]): any;

        function isFunction(arg: any): any;

        function isNotEmptyObject(arg: any): any;

        function isNotEmptyString(arg: any): any;

        function isNullOrUndefined(arg: any): any;

        function isNumber(arg: any): any;

        function isObject(arg: any): any;

        function isString(arg: any): any;

    }

    namespace ViewLoader {
        namespace sequenceGenerator {
            function nextValue(): any;

        }

    }

    namespace ViewManager {
        const appSelector: string;

        const currentTab: {
            tabIndex: string;
        };

        const viewScopes: {
        };

        function destroyView(viewElement: any): void;

        function doRenderView(url: any): void;

        function getViewScope(viewName: any, allowCreate: boolean): any;

        function initView(viewElement: any): void;

        function loadView(url: any): void;

        function pauseView(viewElement: any): void;

        function popView(url: any): void;

        function pushView(url: any): void;

        function removeViewScope(viewName: any): void;

        function resumeView(viewElement: any): void;

        function setViewScope(viewName: any, viewScope: any): void;

        namespace sequenceGenerator {
            function nextValue(): any;

        }

    }

}

export namespace utils {
    function concatObjects(objectArray: any, ...args: any[]): any;

    function convertToString(arg: any): any;

    function emptyArrayIfNullOrUndefined(arg: any): any;

    function emptyObjectIfNullOrUndefined(arg: any): any;

    function emptyStringIfNullOrUndefined(arg: any): any;

    function formatString(format: any, objectArray: any, ...args: any[]): any;

    function isFunction(arg: any): any;

    function isNotEmptyObject(arg: any): any;

    function isNotEmptyString(arg: any): any;

    function isNullOrUndefined(arg: any): any;

    function isNumber(arg: any): any;

    function isObject(arg: any): any;

    function isString(arg: any): any;

}

